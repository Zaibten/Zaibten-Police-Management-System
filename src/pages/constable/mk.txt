import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

export default function ConstablePage() {
  const [constables, setConstables] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchText, setSearchText] = useState('');

  const itemsPerPage = 10;

  useEffect(() => {
    async function fetchConstables() {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch('https://zaibtenpoliceserver.vercel.app/api/constablesdata');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setConstables(data);
      } catch (err: any) {
        setError(err.message || 'Failed to fetch constables');
      } finally {
        setLoading(false);
      }
    }

    fetchConstables();
  }, []);

  // Filter constables by fullName (case-insensitive)
  const filteredConstables = constables.filter((c) =>
    c.fullName.toLowerCase().includes(searchText.toLowerCase())
  );

  const totalPages = Math.ceil(filteredConstables.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentConstables = filteredConstables.slice(startIndex, startIndex + itemsPerPage);

  const goToNextPage = () => setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  const goToPrevPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));

  return (
    <div style={{ height: '100vh', overflowY: 'auto', padding: '20px', backgroundColor: '#f9f9f9' }}>
      <h2 className="text-3xl font-bold mb-8 text-center text-blue-700">Constables</h2>

      <div className="flex justify-center mb-4">
        <input
          type="text"
          placeholder="Search by full name"
          className="w-full max-w-md px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          value={searchText}
          onChange={(e) => {
            setSearchText(e.target.value);
            setCurrentPage(1);
          }}
        />
      </div>

      <div className="flex items-center justify-center mt-4 space-x-2">
        <button
          onClick={goToPrevPage}
          disabled={currentPage === 1}
          className={`p-2 rounded-full border ${
            currentPage === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100'
          }`}
        >
          <ChevronLeft className="w-5 h-5" />
        </button>

        <span className="text-sm font-medium text-gray-700">
          Page {currentPage} of {totalPages}
        </span>

        <button
          onClick={goToNextPage}
          disabled={currentPage === totalPages}
          className={`p-2 rounded-full border ${
            currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100'
          }`}
        >
          <ChevronRight className="w-5 h-5" />
        </button>
      </div>

      <br />

      {loading ? (
        <p className="text-center text-gray-600">Loading constables...</p>
      ) : error ? (
        <p className="text-center text-red-600">Error: {error}</p>
      ) : (
        <div className="max-h-[400px] overflow-y-auto overflow-x-auto shadow border border-gray-200 rounded-lg">
          <table className="min-w-full text-sm text-left text-gray-700">
            <thead className="bg-gray-100 uppercase text-xs font-medium">
              <tr>
                <th className="px-4 py-2">Full Name</th>
                <th className="px-4 py-2">Rank</th>
                <th className="px-4 py-2">Badge Number</th>
                <th className="px-4 py-2">DOB</th>
                <th className="px-4 py-2">Gender</th>
                <th className="px-4 py-2">Contact Number</th>
                <th className="px-4 py-2">Email</th>
                <th className="px-4 py-2">Address</th>
                <th className="px-4 py-2">Police Station</th>
                <th className="px-4 py-2">Joining Date</th>
                <th className="px-4 py-2">Status</th>
                <th className="px-4 py-2">Qualification</th>
                <th className="px-4 py-2">Weapons</th>
                <th className="px-4 py-2">Vehicles</th>
                <th className="px-4 py-2">Remarks</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-100 border-t border-gray-100">
              {currentConstables.map((constable) => (
                <tr key={constable._id || constable.id} className="hover:bg-gray-50">
                  <td className="px-4 py-3">{constable.fullName}</td>
                  <td className="px-4 py-3">{constable.rank}</td>
                  <td className="px-4 py-3">{constable.badgeNumber}</td>
                  <td className="px-4 py-3">{constable.dob}</td>
                  <td className="px-4 py-3">{constable.gender}</td>
                  <td className="px-4 py-3">{constable.contactNumber}</td>
                  <td className="px-4 py-3">{constable.email || '-'}</td>
                  <td className="px-4 py-3">{constable.address || '-'}</td>
                  <td className="px-4 py-3">{constable.policeStation}</td>
                  <td className="px-4 py-3">{constable.joiningDate}</td>
                  <td className="px-4 py-3">{constable.status}</td>
                  <td className="px-4 py-3">{constable.qualification || '-'}</td>
                  <td className="px-4 py-3">{(constable.weapons || []).join(', ') || '-'}</td>
                  <td className="px-4 py-3">{(constable.vehicles || []).join(', ') || '-'}</td>
                  <td className="px-4 py-3">{constable.remarks || '-'}</td>
                  <td className="px-4 py-2 flex flex-wrap items-center gap-2">
  <button
    onClick={() => handleEdit(statio)}
    className="bg-blue-500 hover:bg-blue-600 text-white text-xs px-3 py-1 rounded"
  >
    Edit
  </button>
  <button
    onClick={() => handleDelete(station._id)}
    className="bg-red-500 hover:bg-red-600 text-white text-xs px-3 py-1 rounded"
  >
    Delete
  </button>
</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
